{"version":3,"sources":["components/SearchBar.js","components/Employee.js","components/EmployeeList.js","components/EmployeeModal.js","App.js","serviceWorker.js","index.js"],"names":["Searchbar","props","react_default","a","createElement","className","type","value","term","onChange","search","placeholder","Employee","_ref","employee","selectedEmployee","onClick","login","uuid","src","picture","large","alt","concat","name","first","last","email","location","city","EmployeeList","employees","length","filter","indexOf","toLowerCase","map","components_Employee","key","EmployeeModal","_this","this","selected","state","states","getStateCodeByStateName","lib_default","isOpen","contentLabel","onRequestClose","handleClearSelectedOption","ariaHideApp","closeTimeoutMS","overlayClassName","phone","street","postcode","dob","date","slice","split","reverse","join","nextEmployee","fa","prevEmployee","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","e","target","setState","find","undefined","current","index","next","prev","filterd","fetch","then","res","json","data","results","SearchBar","components_EmployeeList","components_EmployeeModal","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iPAiBeA,SAdI,SAACC,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAb,sCACEH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OACZC,MAAON,EAAMO,KACbC,SAAUR,EAAMS,OAChBC,YAAY,uBACZN,UAAU,oBCKDO,EAdE,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,iBAAZ,OACfb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBW,QAAS,kBAAMD,EAAiBD,EAASG,MAAMC,QAC5EhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASc,IAAKL,EAASM,QAAQC,MAAOC,IAAG,GAAAC,OAAKT,EAASU,KAAKC,MAAnB,eACxDvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQS,EAASU,KAAKC,MAAnC,IAA2CX,EAASU,KAAKE,MACzDxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAASS,EAASa,OAC/BzB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQS,EAASc,SAASC,UCQhCC,EAdM,SAAAjB,GAAA,IAAEkB,EAAFlB,EAAEkB,UAAWvB,EAAbK,EAAaL,KAAMO,EAAnBF,EAAmBE,iBAAnB,OACnBb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACS,IAArB0B,EAAUC,OACX9B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAChB0B,EACCE,OAAO,SAAAnB,GAAQ,OAAyD,IAArDA,EAASU,KAAKC,MAAMS,QAAQ1B,EAAK2B,iBACE,IAApDrB,EAASU,KAAKE,KAAKQ,QAAQ1B,EAAK2B,iBAClCC,IAAI,SAAAtB,GAAQ,OACbZ,EAAAC,EAAAC,cAACiC,EAAD,CAAUtB,iBAAkBA,EAC3BuB,IAAKxB,EAASG,MAAMC,KAAMJ,SAAUA,iDC8C1ByB,mLApDJ,IAAAC,EAAAC,KACD3B,EAAW2B,KAAKxC,MAAMyC,SACtBC,EAAQ7B,GAAY8B,IAAOC,wBAAwB/B,EAASc,SAASe,OAC3E,OACEzC,EAAAC,EAAAC,cAAC0C,EAAA3C,EAAD,CACA4C,SAAUN,KAAKxC,MAAMyC,SACrBM,aAAa,kBACbC,eAAgBR,KAAKxC,MAAMiD,0BAC3BC,aAAa,EACbC,eAAgB,IAChB/C,UAAU,QACVgD,iBAAiB,WAEhBvC,GACCZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbc,IAAKL,EAASM,QAAQC,MACtBC,IAAI,sBAENpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACXS,EAASU,KAAKC,MADjB,IACyBX,EAASU,KAAKE,MACvCxB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAoBS,EAASa,OAC1CzB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAmBS,EAASc,SAASC,MAClD3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,SAAIU,EAASwC,OACbpD,EAAAC,EAAAC,cAAA,SAAIU,EAASc,SAAS2B,OAAtB,KAAgCZ,EAAhC,IAAwC7B,EAASc,SAAS4B,UAC1DtD,EAAAC,EAAAC,cAAA,sBAAcU,EAAS2C,IAAIC,KAAKC,MAAM,EAAG,IAAIC,MAAM,KAAKC,UAAUC,KAAK,MACvE5D,EAAAC,EAAAC,cAAA,QACAC,UAAU,QACVW,QAAS,kBAAKwB,EAAKvC,MAAM8D,aAAajD,EAASG,MAAMC,QACpDhB,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,OAED9D,EAAAC,EAAAC,cAAA,QACAY,QAAS,kBAAMwB,EAAKvC,MAAMgE,aAAanD,EAASG,MAAMC,OACtDb,UAAU,QACTH,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,OAED9D,EAAAC,EAAAC,cAAA,QACEY,QAASyB,KAAKxC,MAAMiD,0BACrB7C,UAAU,SACVH,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,kBA1CaE,aCoEbC,cAhEb,SAAAA,EAAYlE,GAAM,IAAAuC,EAAA,OAAA4B,OAAAC,EAAA,EAAAD,CAAA3B,KAAA0B,IAChB3B,EAAA4B,OAAAE,EAAA,EAAAF,CAAA3B,KAAA2B,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA/B,KAAMxC,KAaRS,OAAS,SAAC+D,GACR,IAAMjE,EAAOiE,EAAEC,OAAOnE,MACtBiC,EAAKmC,SAAS,iBAAO,CAACnE,WAhBNgC,EAmBlBzB,iBAAmB,SAACG,GAClB,IAAMwB,EAAWF,EAAKG,MAAMZ,UAAU6C,KAAK,SAAA9D,GAAQ,OACjDA,EAASG,MAAMC,OAASA,IACtBsB,EAAKmC,SAAS,iBAAO,CAACjC,eAtBVF,EAyBlBU,0BAA4B,WAC1BV,EAAKmC,SAAS,iBAAO,CAACjC,cAAUmC,MA1BhBrC,EA6BlBuB,aAAe,SAAC7C,GACd,IAAI4D,EAAUtC,EAAKG,MAAMZ,UAAU6C,KAAK,SAAA9D,GAAQ,OAAII,IAASJ,EAASG,MAAMC,OACxE6D,EAAQvC,EAAKG,MAAMZ,UAAUG,QAAQ4C,GACrCE,EAAOxC,EAAKG,MAAMZ,UAAUgD,EAAM,IAAMvC,EAAKG,MAAMZ,UAAU,GACjES,EAAKmC,SAAS,iBAAO,CAACjC,SAAUsC,MAjChBxC,EAoClByB,aAAe,SAAC/C,GACd,IAAI4D,EAAUtC,EAAKG,MAAMZ,UAAU6C,KAAK,SAAA9D,GAAQ,OAAII,IAASJ,EAASG,MAAMC,OACxE6D,EAAQvC,EAAKG,MAAMZ,UAAUG,QAAQ4C,GACrCG,EAAOzC,EAAKG,MAAMZ,UAAWgD,EAAQ,IAAOvC,EAAKG,MAAMZ,UAAWS,EAAKG,MAAMZ,UAAUC,OAAS,GACpGQ,EAAKmC,SAAS,iBAAO,CAACjC,SAAUuC,MAtChCzC,EAAKG,MAAQ,CACXZ,UAAW,GACXvB,KAAM,GACN0E,QAAS,GACTxC,cAAUmC,GAEZM,IAAM,gDACLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAI/C,EAAKmC,SAAS,iBAAO,CAAC5C,UAAWwD,EAAKC,aAVpChD,wEA6ChB,OACItC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqF,EAAD,CAAWjF,KAAMiC,KAAKE,MAAMnC,KAAME,OAAQ+B,KAAK/B,SAC/CR,EAAAC,EAAAC,cAACsF,EAAD,CACE3E,iBAAkB0B,KAAK1B,iBACvBP,KAAMiC,KAAKE,MAAMnC,KACjBuB,UAAWU,KAAKE,MAAMZ,YAExB7B,EAAAC,EAAAC,cAACuF,EAAD,CACEzC,0BAA2BT,KAAKS,0BAChCR,SAAUD,KAAKE,MAAMD,SACrBqB,aAActB,KAAKsB,aACnBE,aAAcxB,KAAKwB,uBA1DbC,aCEE0B,QACW,cAA7BC,OAAOjE,SAASkE,UAEe,UAA7BD,OAAOjE,SAASkE,UAEhBD,OAAOjE,SAASkE,SAASC,MACvB,2DCXNC,IAASC,OAAO/F,EAAAC,EAAAC,cAAC8F,EAAD,MAASC,SAASC,eAAe,SDoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.8f46077a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Searchbar  = (props) => {\r\n  return(\r\n    <div className=\"header\">\r\n    <p className=\"heading\">AWESOME STARTUP EMPLOYEE DIRECTORY</p>\r\n      <input type=\"text\"\r\n      value={props.term}\r\n      onChange={props.search}\r\n      placeholder=\"Search for Employees\"\r\n      className=\"search-field\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Searchbar;","import React from \"react\";\r\n\r\nconst Employee = ({employee, selectedEmployee}) => (\r\n  <div className=\"employee-card\" onClick={() => selectedEmployee(employee.login.uuid)}>\r\n    <img className=\"avatar\" src={employee.picture.large} alt={`${employee.name.first}'s avatar`}/>\r\n    <div className=\"info\">\r\n      <p className=\"name\">{employee.name.first} {employee.name.last}</p>\r\n      <div className=\"extra\">\r\n        <p className=\"email\">{employee.email}</p>\r\n        <p className=\"city\">{employee.location.city}</p>\r\n      </div>\r\n    </div>\r\n    \r\n  </div>\r\n)\r\n\r\nexport default Employee;","import React from \"react\";\r\nimport Employee from \"./Employee\";\r\n\r\nconst EmployeeList = ({employees, term, selectedEmployee}) => (\r\n  <div className=\"employee-list\">\r\n    {employees.length === 0 ?\r\n    <span className=\"loading\"></span>:\r\n    employees\r\n    .filter(employee => employee.name.first.indexOf(term.toLowerCase()) !== -1\r\n    || employee.name.last.indexOf(term.toLowerCase()) !== -1)\r\n    .map(employee => \r\n    <Employee selectedEmployee={selectedEmployee}\r\n     key={employee.login.uuid} employee={employee}/>)}\r\n    \r\n  </div>\r\n)\r\n\r\nexport default EmployeeList;","import React, { Component } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport states from \"us-state-codes\";\r\nimport { FaChevronRight, FaChevronLeft, FaTimes } from \"react-icons/fa\";\r\n\r\nclass EmployeeModal extends Component{\r\n  render() {\r\n    const employee = this.props.selected;\r\n    const state = employee && states.getStateCodeByStateName(employee.location.state);\r\n    return(\r\n      <Modal\r\n      isOpen={!!this.props.selected}\r\n      contentLabel=\"Selected option\"\r\n      onRequestClose={this.props.handleClearSelectedOption}\r\n      ariaHideApp={false}\r\n      closeTimeoutMS={200}\r\n      className=\"modal\"\r\n      overlayClassName=\"overlay\"\r\n      >\r\n      {employee && \r\n        <div className=\"employee_modal\">\r\n          <img className=\"modal_avatar\" \r\n            src={employee.picture.large} \r\n            alt=\"employee's avatar\"\r\n          />\r\n          <div className=\"modal_info\">\r\n            <h3 className=\"modal_info-name\">\r\n              {employee.name.first} {employee.name.last}</h3>\r\n            <p className=\"modal_info-email\">{employee.email}</p>\r\n            <p className=\"modal_info-city\">{employee.location.city}</p>\r\n            <div className=\"modal_info-extra\">\r\n              <p>{employee.phone}</p>\r\n              <p>{employee.location.street}, {state} {employee.location.postcode}</p>\r\n              <p>Birthday: {employee.dob.date.slice(2, 10).split(\"-\").reverse().join(\"/\")}</p>\r\n              <span \r\n              className=\"right\"\r\n              onClick={()=> this.props.nextEmployee(employee.login.uuid)}\r\n              ><FaChevronRight />\r\n              </span>\r\n              <span \r\n              onClick={() => this.props.prevEmployee(employee.login.uuid)}\r\n              className=\"left\"\r\n              ><FaChevronLeft />\r\n              </span>\r\n              <span\r\n                onClick={this.props.handleClearSelectedOption}\r\n               className=\"close\"\r\n              ><FaTimes />\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        }\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EmployeeModal;\r\n\r\n","import React, { Component } from 'react';\r\nimport fetch from \"node-fetch\";\r\nimport \"./styles/styles.scss\";\r\n// import \"normalize.css/normalize.css\";\r\nimport SearchBar from \"./components/SearchBar\";\r\nimport Employeelist from \"./components/EmployeeList\";\r\nimport EmployeeModal from \"./components/EmployeeModal\";\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      employees: [],\r\n      term: \"\",\r\n      filterd: [],\r\n      selected: undefined\r\n    }\r\n    fetch(\"https://randomuser.me/api/?results=12&nat=us\")\r\n    .then(res => res.json())\r\n    .then(data => this.setState(() => ({employees: data.results})))\r\n  }\r\n\r\n\r\n  search = (e) => {\r\n    const term = e.target.value;\r\n    this.setState(() => ({term}));\r\n  };\r\n\r\n  selectedEmployee = (uuid) => {\r\n    const selected = this.state.employees.find(employee => \r\n      employee.login.uuid === uuid);\r\n        this.setState(() => ({selected}))\r\n  }\r\n\r\n  handleClearSelectedOption = () => {\r\n    this.setState(() => ({selected: undefined}))\r\n  }\r\n\r\n  nextEmployee = (uuid) => {\r\n    let current = this.state.employees.find(employee => uuid === employee.login.uuid);\r\n    let index = this.state.employees.indexOf(current);\r\n    let next = this.state.employees[index+1] || this.state.employees[0]\r\n    this.setState(() => ({selected: next}));\r\n  }\r\n\r\n  prevEmployee = (uuid) => {\r\n    let current = this.state.employees.find(employee => uuid === employee.login.uuid);\r\n    let index = this.state.employees.indexOf(current);\r\n    let prev = this.state.employees[ index - 1 ] || this.state.employees[ this.state.employees.length - 1];\r\n    this.setState(() => ({selected: prev}));\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"app\">\r\n          <SearchBar term={this.state.term} search={this.search}/>\r\n          <Employeelist \r\n            selectedEmployee={this.selectedEmployee}\r\n            term={this.state.term}\r\n            employees={this.state.employees}\r\n          />\r\n          <EmployeeModal \r\n            handleClearSelectedOption={this.handleClearSelectedOption}\r\n            selected={this.state.selected}\r\n            nextEmployee={this.nextEmployee}\r\n            prevEmployee={this.prevEmployee}\r\n          />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}